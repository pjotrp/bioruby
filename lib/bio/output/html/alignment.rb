#
# = bio/output/html/alignment.rb - HTML alignment output
#
# Copyright::  Copyright (C) 2010 Pjotr Prins <pjotr.prins@thebird.nl>
#
# License::    The Ruby License
#

module Bio::Html

  class HtmlAlignment

    # == Description
    #
    # Create HTML colorized alignments from an Alignment object.
    # Extra information below the alignment, like evidence for
    # positive selection, can be added.
    #
    # == Examples
    #
    # Show evidence of positive selection pressure, as calculated
    # by PAML's codeml
    #
    #--
    # The following few lines are not shown in the rdoc documentation
    #
    #   >> require 'bio'
    #   >> require 'bio/test/biotestfile'
    #   >> buf = BioTestFile.read('paml/codeml/models/results0-3.txt')
    #   >> alnbuf = BioTestFile.read('clustalw/example1.aln')
    #++
    #
    # alnbuf contains the contents of a Clustal alignment file
    #
    #   >> aln = Bio::ClustalW::Report.new(alnbuf)
    #
    # Instantiate an HtmlAlignment object 
    #
    #   >> simple = Bio::Html::HtmlAlignment.new(aln.alignment, :title => "Clustal")
    #   >> html = simple.html()
    #
    # Ascertain we have a result
    #
    #   >> html[8..58]
    #   => "<pre>\nquery                                   -MKNT"
    #
    # Write it to a file (for viewing)
    #
    #   >> File.open('test.html','w') {|f| f.write(html) }
    # 
    #   !> colored = HtmlAlignment(aa_alignment,ColorScheme::Zappo)
    #   !> colored.add_positive_sites(codeml_positive_sites)
    #   !> colored.html
    #   !> "xxx"
    # 
    # Invoke Bioruby's PAML codeml parser, after having read the contents
    # of the codeml result file into _buf_ (for example using File.read)
    #
    #   !> codeml = Bio::PAML::Codeml::Report.new(buf)
    #

    # Instantiate HtmlAlignment object where _alignment_ is a Bio::Alignment
    # type object.
    #
    # Supported options are
    #
    #   :title       The title
    #
    def initialize alignment, options = {}
      @alignment = alignment
      @options = options
    end

    # Show a section title
    def title
      return @options[:title] if @options[:title]
      ''
    end

    # Return credits in footer
    def footer
      'Generated by Bioruby Bio::HtmlAlignment'
    end

    # HTML generator (color support planned for)
    #
    # Supported options are 
    #
    #   :no_title      Don't show title
    #   :no_footer     Don't show footer
    #   :ljust         Left adjust description/id (default 40)
    def html options = { :ljust => 40 }
      html_simple(options)
    end

    # The most simple form of HTML generator.
    #
    # For the supported options see html
    def html_simple options
      ljust = options[:ljust]
      ret = ''
      ret += title+"\n" if not options[:no_title]
      ret += "<pre>\n"
      @alignment.each_pair do | id, seq |
        ret += id.ljust(ljust)+seq+"\n"
      end
      ret += "Consensus".ljust(ljust)+@alignment.match_line+"\n"
      ret += "</pre>"
      ret += footer if not options[:no_footer]
      ret
    end

  end # Alignment

end # Bio::Html


